/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.molgen.genomeCATPro.cat;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import org.molgen.genomeCATPro.cat.maparr.MapArrayFrame;
import org.molgen.genomeCATPro.common.Defaults.GenomeRelease;
import org.molgen.genomeCATPro.datadb.dbentities.MapData;
import org.molgen.genomeCATPro.guimodul.data.GlobalPositionDataPanel;
import org.molgen.genomeCATPro.guimodul.data.ShowDataAction;
import org.molgen.genomeCATPro.guimodul.data.ShowRulerAction;
import org.openide.awt.ToolbarPool;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
public final class MapCATTopComponent extends TopComponent {

    private static MapCATTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/molgen/genomeCATPro/cat/genomeCATLogo_map.png";
    //pro mapping (mapName) ein Fenster
    private static final String PREFERRED_ID = "MapCATTopComponent";
    private static Map<String, MapCATTopComponent> arrayList =
            new HashMap<String, MapCATTopComponent>();
    private InstanceContent ic = new InstanceContent();
    static AbstractLookup al;

    private MapCATTopComponent() {
        this.array = new MapArrayFrame();
        MapCATTopComponent.arrayList.put(null, this);
        initComponents();
        associateLookup(new AbstractLookup(ic));
        setName(NbBundle.getMessage(MapCATTopComponent.class, "CTL_MapCATTopComponent"));
        setToolTipText(NbBundle.getMessage(MapCATTopComponent.class, "HINT_MapCATTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    private MapCATTopComponent(String name, GenomeRelease release) {
        this.array = new MapArrayFrame();
        this.array.setRelease(release);
        this.array.setMapName(name);

        MapCATTopComponent.arrayList.put(name, this);

        initComponents();
        this.setDisplayName(name);
        associateLookup(new AbstractLookup(ic));
        setName(NbBundle.getMessage(MapCATTopComponent.class, "CTL_MapCATTopComponent"));
        setToolTipText(NbBundle.getMessage(MapCATTopComponent.class, "HINT_MapCATTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        array = new org.molgen.genomeCATPro.cat.maparr.MapArrayFrame();

        setDisplayName(org.openide.util.NbBundle.getMessage(MapCATTopComponent.class, "MapCATTopComponent.displayName")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(array, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(array, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public org.molgen.genomeCATPro.cat.maparr.MapArrayFrame array;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized MapCATTopComponent getDefault() {
        if (instance == null) {
            instance = new MapCATTopComponent();
        }
        return instance;
    }

    public static MapCATTopComponent findInstance(String name, GenomeRelease release) {

        // arrayframe for release existing?
        MapCATTopComponent arrayFrame = arrayList.get(name);

        if (arrayFrame == null) {

            //empty frame existing?
            arrayFrame = arrayList.get(null);


            if (arrayFrame == null) {
                //create first one
                return new MapCATTopComponent(name, release);

            }
            // delete empty from list
            // add frame for release
            arrayFrame.array.setRelease(release);
            arrayFrame.array.setMapName(name);
            arrayFrame.setDisplayName(name);

            arrayList.remove(null);
            arrayList.put(name, arrayFrame);
        }
        // add new data to existing frame

        return arrayFrame;
    }

    public static MapCATTopComponent findInstance(MapData d, GenomeRelease release) {

        // arrayframe for release existing?
        MapCATTopComponent arrayFrame = arrayList.get(d.getMapName());

        if (arrayFrame == null) {

            //empty frame existing?
            arrayFrame = arrayList.get(null);


            if (arrayFrame == null) {
                //create first one
                arrayFrame = new MapCATTopComponent(d.getMapName(), release);

            }
            // delete empty from list
            // add frame for release
            arrayFrame.array.setMapName(d.getMapName());
            arrayFrame.array.setRelease(release);
            arrayList.remove(null);
            arrayList.put(d.getMapName(), arrayFrame);
        }
        // add new data to existing frame
        arrayFrame.array.addData(new MapData[]{d});
        return arrayFrame;
    }

    /**
     * Obtain the MapCATTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized MapCATTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(MapCATTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof MapCATTopComponent) {
            return (MapCATTopComponent) win;
        }
        Logger.getLogger(MapCATTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        ic.add(this.array);
        TopComponent win = ArrayFramePropsTopComponent.findInstance();
        win.open();
        win.requestActive();
        GlobalPositionDataPanel.setRelease(
                this.array.getRelease() != null ? this.array.getRelease().toString() : "");
    }

    @Override
    public void componentShowing() {

        ToolbarPool.getDefault().setConfiguration("CATApp");

        if (this.array != null) {
            //ZoomYAction.getInstance().setFactor(this.array.getZoomY());
            GlobalPositionDataPanel.setRelease(
                    this.array.getRelease() != null ? this.array.getRelease().toString() : "");

            this.array.showData(ShowDataAction.getState());
            this.array.showRuler(ShowRulerAction.getState());
            this.array.getPositionToHistory();
            this.array.scaleArrays();   //210912 kt scale at view change
        }

    }

    @Override
    public void componentHidden() {
        //noch componente offen?

        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null || win == this) {

            ToolbarPool.getDefault().setConfiguration("Standard");
        }
    }

    @Override
    public void componentClosed() {
        MapCATTopComponent.arrayList.remove(this.array.getMapName());
        ic.remove(this.array);
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    public MapArrayFrame getArray() {
        return array;
    }

    public void setArray(MapArrayFrame array) {
        this.array = array;
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return MapCATTopComponent.getDefault();
        }
    }
}
