/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.molgen.genomeCATPro.guimodul.project;

import java.io.Serializable;
import java.util.logging.Logger;
import org.molgen.genomeCATPro.datadb.service.DBUtils;
import org.molgen.genomeCATPro.datadb.service.ExperimentService;
import org.molgen.genomeCATPro.datadb.service.ProjectService;
import org.molgen.genomeCATPro.datadb.service.ServiceListener;
import org.molgen.genomeCATPro.guimodul.project.ProjectNodeFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
public final class ProjectTreeTopComponent extends TopComponent
        implements ExplorerManager.Provider, ServiceListener {

    private static ExplorerManager em = new ExplorerManager();
    private static ProjectTreeTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ProjectTreeTopComponent";
    public static boolean isFilter = false;
    public static String sample = "";
    public static String user = "";
    public static String project = "";
    public static String release = "";

    public ProjectTreeTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ProjectTreeTopComponent.class, "CTL_ProjectTreeTopComponent"));
        setToolTipText(NbBundle.getMessage(ProjectTreeTopComponent.class, "HINT_ProjectTreeTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        em.setRootContext(new AbstractNode(Children.create(new ProjectNodeFactory(), true)));
        //associate properties with node props
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        
        this.beanTreeView1.setRootVisible(false);
        //ExperimentService.addListener(this);
        ProjectService.addListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();
        jPanel1 = new javax.swing.JPanel();
        filter = new javax.swing.JButton();
        jButtonNoFilter = new javax.swing.JButton();
        cbRelease = new javax.swing.JComboBox();
        checkRelease = new javax.swing.JCheckBox();
        checkOwner = new javax.swing.JCheckBox();
        cbOwner = new javax.swing.JComboBox();
        checkProject = new javax.swing.JCheckBox();
        cbProject = new javax.swing.JComboBox();
        checkSample = new javax.swing.JCheckBox();
        cbSample = new javax.swing.JComboBox();
        jLabelFilter = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        beanTreeView1.setAutoscrolls(true);
        beanTreeView1.setPreferredSize(new java.awt.Dimension(400, 550));
        add(beanTreeView1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.jPanel1.border.title"))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 200));

        org.openide.awt.Mnemonics.setLocalizedText(filter, "filter");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonNoFilter, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.jButtonNoFilter.text")); // NOI18N
        jButtonNoFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNoFilterActionPerformed(evt);
            }
        });

        cbRelease.setModel(new javax.swing.DefaultComboBoxModel( DBUtils.getAllReleases()));
        cbRelease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbReleaseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkRelease, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.checkRelease.text")); // NOI18N
        checkRelease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkReleaseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkOwner, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.checkOwner.text")); // NOI18N
        checkOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOwnerActionPerformed(evt);
            }
        });

        cbOwner.setModel(new javax.swing.DefaultComboBoxModel( DBUtils.getAllUser()));
        cbOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOwnerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkProject, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.checkProject.text")); // NOI18N
        checkProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProjectActionPerformed(evt);
            }
        });

        cbProject.setModel(new javax.swing.DefaultComboBoxModel( DBUtils.getStudies()));
        cbProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProjectActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkSample, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.checkSample.text")); // NOI18N
        checkSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSampleActionPerformed(evt);
            }
        });

        cbSample.setModel(new javax.swing.DefaultComboBoxModel(DBUtils.getAllSamples()));
        cbSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSampleActionPerformed(evt);
            }
        });

        jLabelFilter.setForeground(new java.awt.Color(255, 51, 102));
        org.openide.awt.Mnemonics.setLocalizedText(jLabelFilter, org.openide.util.NbBundle.getMessage(ProjectTreeTopComponent.class, "ProjectTreeTopComponent.jLabelFilter.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkRelease)
                    .addComponent(checkOwner)
                    .addComponent(checkProject)
                    .addComponent(checkSample)
                    .addComponent(jLabelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonNoFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbSample, 0, 159, Short.MAX_VALUE)
                    .addComponent(cbProject, 0, 159, Short.MAX_VALUE)
                    .addComponent(cbOwner, 0, 159, Short.MAX_VALUE)
                    .addComponent(cbRelease, 0, 159, Short.MAX_VALUE))
                .addGap(68, 68, 68))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {filter, jButtonNoFilter});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(checkRelease)
                    .addComponent(cbRelease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(checkOwner)
                    .addComponent(cbOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(checkProject)
                    .addComponent(cbProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(checkSample)
                    .addComponent(cbSample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonNoFilter)
                    .addComponent(filter)
                    .addComponent(jLabelFilter))
                .addContainerGap())
        );

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    public boolean isIsFilter() {
        return isFilter;
    }

    public void setIsFilter(boolean _isFilter) {
        ProjectTreeTopComponent.isFilter = _isFilter;
        this.jLabelFilter.setText(ProjectTreeTopComponent.isFilter ? "filter set" : "");
    }

private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
    this.setIsFilter(true);
    this.dbChanged();
//ExperimentService.notifyListener();
}//GEN-LAST:event_filterActionPerformed

private void checkReleaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkReleaseActionPerformed
    if (checkRelease.isSelected() && this.cbRelease.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.release = this.cbRelease.getSelectedItem().toString();
    } else {
        release = "";
    }
}//GEN-LAST:event_checkReleaseActionPerformed

private void checkOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOwnerActionPerformed
    if (checkOwner.isSelected() && this.cbOwner.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.user = this.cbOwner.getSelectedItem().toString();
    } else {
        user = "";
    }
}//GEN-LAST:event_checkOwnerActionPerformed

private void checkProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProjectActionPerformed
    if (checkProject.isSelected() && this.cbProject.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.project = this.cbProject.getSelectedItem().toString();
    } else {
        project = "";
    }
}//GEN-LAST:event_checkProjectActionPerformed

private void checkSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSampleActionPerformed
    if (checkSample.isSelected() && this.cbSample.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.sample = this.cbSample.getSelectedItem().toString();
    } else {
        sample = "";
    }
}//GEN-LAST:event_checkSampleActionPerformed

private void jButtonNoFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNoFilterActionPerformed
    this.setIsFilter(false);
    this.dbChanged();
//ExperimentService.notifyListener();
}//GEN-LAST:event_jButtonNoFilterActionPerformed

private void cbReleaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbReleaseActionPerformed
    if (checkRelease.isSelected() && this.cbRelease.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.release = this.cbRelease.getSelectedItem().toString();
    } else {
        release = "";
    }
}//GEN-LAST:event_cbReleaseActionPerformed

private void cbOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOwnerActionPerformed
    if (checkOwner.isSelected() && this.cbOwner.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.user = this.cbOwner.getSelectedItem().toString();
    } else {
        user = "";
    }
}//GEN-LAST:event_cbOwnerActionPerformed

private void cbProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProjectActionPerformed
    if (checkProject.isSelected() && this.cbProject.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.project = this.cbProject.getSelectedItem().toString();
    } else {
        project = "";
    }
}//GEN-LAST:event_cbProjectActionPerformed

private void cbSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSampleActionPerformed
    if (checkSample.isSelected() && this.cbSample.getSelectedIndex() >= 0) {
        ProjectTreeTopComponent.sample = this.cbSample.getSelectedItem().toString();
    } else {
        sample = "";
    }
}//GEN-LAST:event_cbSampleActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    private javax.swing.JComboBox cbOwner;
    private javax.swing.JComboBox cbProject;
    private javax.swing.JComboBox cbRelease;
    private javax.swing.JComboBox cbSample;
    private javax.swing.JCheckBox checkOwner;
    private javax.swing.JCheckBox checkProject;
    private javax.swing.JCheckBox checkRelease;
    private javax.swing.JCheckBox checkSample;
    private javax.swing.JButton filter;
    private javax.swing.JButton jButtonNoFilter;
    private javax.swing.JLabel jLabelFilter;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ProjectTreeTopComponent getDefault() {
        if (instance == null) {
            instance = new ProjectTreeTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ProjectTreeTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ProjectTreeTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ProjectTreeTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ProjectTreeTopComponent) {
            return (ProjectTreeTopComponent) win;
        }
        Logger.getLogger(ProjectTreeTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        this.dbChanged();
        // associate properties with node props
        //associateLookup(ExplorerUtils.createLookup(em, getActionMap()));

    }

    @Override
    public void componentClosed() {
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ProjectTreeTopComponent.getDefault();
        }
    }

    public ExplorerManager getExplorerManager() {
        return ProjectTreeTopComponent.em;
    }

    public void dbChanged() {
        em.setRootContext(new AbstractNode(Children.create(new ProjectNodeFactory(), true)));
    }
}
