/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.molgen.genomeCATPro.guimodul.experiment;

import java.beans.IntrospectionException;
import java.util.List;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.molgen.genomeCATPro.datadb.dbentities.ExperimentDetail;

import org.molgen.genomeCATPro.datadb.dbentities.Study;
import org.molgen.genomeCATPro.datadb.service.ExperimentService;
import org.molgen.genomeCATPro.datadb.service.ProjectService;
import org.molgen.genomeCATPro.datadb.service.ServiceListener;
import org.molgen.genomeCATPro.guimodul.tree.ExperimentDetailNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Node;

/**
 *
 * @author tebel
 */
public class ExperimentDetailNodeFactory extends ChildFactory<ExperimentDetail>
        implements ServiceListener {

    Study project = null;
    

    public ExperimentDetailNodeFactory(Study p) {
        this.project = p;
        //this.e.addPropertyChangeListener(this);

        ExperimentService.addListener(this);


    }

    @Override
    protected boolean createKeys(List<ExperimentDetail> list) {
        list.clear();
        try {
            if (this.project != null) {
                Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(Level.INFO, "getExperimentDetail for Project");
                list.clear();
                list.addAll(ProjectService.listExperimentsForProject(this.project));
                list.addAll(ProjectService.listTracksForProject(this.project));

            }

        //e.setSamples(resultList);

        } catch (Exception ex) {

            Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(Level.SEVERE, "", ex);
        }


        return true;
    }

    @Override
    protected Node createNodeForKey(ExperimentDetail a) {
        /*
        Node node = new AbstractNode(Children.LEAF, Lookups.singleton(a));
        node.setDisplayName(a.getName());
        node.setShortDescription(a.getDescription());
        
        return node;
         */
        try {
            return new ExperimentDetailNode(a);
        } catch (IntrospectionException ex) {
            Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(Level.SEVERE, "", ex);
            return null;
        }

    }

    public void dbChanged() {
        /*try {
        
        if (this.project != null) {
        Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(Level.INFO, "getExperimentDetail for Project");
        list.addAll(ProjectService.listExperimentsForProject(this.project));
        
        } 
        } catch (Exception ex) {
        Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(Level.SEVERE, "", ex);
        }*/
        Logger.getLogger(ExperimentDetailNodeFactory.class.getName()).log(
                Level.INFO, "refresh node");
        this.refresh(true);
    }
}




