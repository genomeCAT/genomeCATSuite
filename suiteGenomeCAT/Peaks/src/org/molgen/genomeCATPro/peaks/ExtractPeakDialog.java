package org.molgen.genomeCATPro.peaks;

/**
 * @name ExtractPeaksWorker.java
 *
 *
 * @author Katrin Tebel <tebel at molgen.mpg.de>
 *
 *
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL") (collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://www.netbeans.org/cddl-gplv2.html or
 * nbbuild/licenses/CDDL-GPL-2-CP. See the License for the specific language
 * governing permissions and limitations under the License. This program is
 * distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.
 */
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.molgen.genomeCATPro.cghpro.chip.ChipFeature;
import org.molgen.genomeCATPro.common.Informable;
import org.molgen.genomeCATPro.common.Utils;
import org.molgen.genomeCATPro.datadb.dbentities.Data;
import org.molgen.genomeCATPro.guimodul.cghpro.CGHProTopComponent;

/**
 *
 *
 */
public class ExtractPeakDialog extends javax.swing.JDialog {

    Data sample;
    private CGHProTopComponent win;
    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd_HH:mm:ss");

    /**
     * Creates new form ExtractPeakDialog
     */
    public ExtractPeakDialog(java.awt.Frame parent, boolean modal, Data s) {
        super(parent, modal);
        this.sample = s;

        initComponents();

        this.jTextFieldSampleName.setText(Utils.getUniquableName(this.sample.getName()));

        this.jCheckBoxZero.setSelected(true);
        this.jCheckBoxNone.setSelected(true);
    }

    static public void getExtractPeakDialog(Data data) {

        ExtractPeakDialog d = new ExtractPeakDialog(null, true, data);
        d.setLocationRelativeTo(null);
        d.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCenter = new javax.swing.ButtonGroup();
        buttonGroupPlus = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMsg = new javax.swing.JTextArea();
        jButtonRun = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelPrompt = new javax.swing.JLabel();
        jLabelSample = new javax.swing.JLabel();
        jTextFieldSampleName = new javax.swing.JTextField();
        jLabelProgress = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbFakePeaks = new javax.swing.JCheckBox();
        fieldWindow = new javax.swing.JTextField();
        fieldGAP = new javax.swing.JTextField();
        fieldOutlier = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCheckBoxZero = new javax.swing.JCheckBox();
        jCheckBoxMean = new javax.swing.JCheckBox();
        jCheckBoxMedian = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jCheckBoxNone = new javax.swing.JCheckBox();
        jCheckBoxVariance = new javax.swing.JCheckBox();
        jCheckBoxStddev = new javax.swing.JCheckBox();
        fieldThreshold = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.title")); // NOI18N

        jTextAreaMsg.setColumns(20);
        jTextAreaMsg.setEditable(false);
        jTextAreaMsg.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMsg);

        jButtonRun.setText("Run");
        jButtonRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jLabelPrompt.setFont(new java.awt.Font("Dialog", 3, 12));
        jLabelPrompt.setText("enter <Run> to Start");

        jLabelSample.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelSample.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jLabelSample.text")); // NOI18N

        jTextFieldSampleName.setText("none");

        jLabelProgress.setText("Progress:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Threshold (+-)");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("<html>Window-Minimal Length:<br/> [number of spots]</html>");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("<html>Maximal Gap:<br/>[Kbp]</html>");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("<html>Percentage of<br/> Outliers [%]</html>");

        cbFakePeaks.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.cbFakePeaks.text")); // NOI18N
        cbFakePeaks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFakePeaksActionPerformed(evt);
            }
        });

        fieldWindow.setText(Integer.toString(org.molgen.genomeCATPro.peaks.ExtractPeaksWorker.DEF_WINDOW) );

        fieldGAP.setText( Integer.toString(org.molgen.genomeCATPro.peaks.ExtractPeaksWorker.DEF_GAP) );

        fieldOutlier.setText(Double.toString(org.molgen.genomeCATPro.peaks.ExtractPeaksWorker.DEF_OUTLIER) );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jPanel1.border.title"))); // NOI18N

        jLabel1.setForeground(new java.awt.Color(255, 0, 153));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jLabel1.text")); // NOI18N

        buttonGroupCenter.add(jCheckBoxZero);
        jCheckBoxZero.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxZero.text")); // NOI18N
        jCheckBoxZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        buttonGroupCenter.add(jCheckBoxMean);
        jCheckBoxMean.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxMean.text")); // NOI18N
        jCheckBoxMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        buttonGroupCenter.add(jCheckBoxMedian);
        jCheckBoxMedian.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxMedian.text")); // NOI18N
        jCheckBoxMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 0, 153));
        jLabel6.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jLabel6.text")); // NOI18N

        buttonGroupPlus.add(jCheckBoxNone);
        jCheckBoxNone.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxNone.text")); // NOI18N
        jCheckBoxNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        buttonGroupPlus.add(jCheckBoxVariance);
        jCheckBoxVariance.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxVariance.text")); // NOI18N
        jCheckBoxVariance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        buttonGroupPlus.add(jCheckBoxStddev);
        jCheckBoxStddev.setText(org.openide.util.NbBundle.getMessage(ExtractPeakDialog.class, "ExtractPeakDialog.jCheckBoxStddev.text")); // NOI18N
        jCheckBoxStddev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxThresholdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxZero)
                    .addComponent(jCheckBoxNone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxMean)
                    .addComponent(jCheckBoxVariance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxMedian)
                    .addComponent(jCheckBoxStddev))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jCheckBoxZero)
                    .addComponent(jCheckBoxMean)
                    .addComponent(jCheckBoxMedian))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(jCheckBoxNone)
                    .addComponent(jCheckBoxVariance)
                    .addComponent(jCheckBoxStddev)))
        );

        fieldThreshold.setValue(this.getThreshold());
        fieldThreshold.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelProgress)
                .addContainerGap(712, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(599, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClose)
                .addContainerGap(351, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelSample, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbFakePeaks)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(fieldGAP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldOutlier, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                .addGap(39, 39, 39))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fieldThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldSampleName, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonClose, jButtonRun});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fieldGAP, fieldOutlier, fieldThreshold, fieldWindow});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jProgressBar, jScrollPane1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSample)
                    .addComponent(jTextFieldSampleName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(fieldWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(fieldGAP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(fieldOutlier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(cbFakePeaks)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProgress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPrompt)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonClose)
                        .addComponent(jButtonRun)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fieldGAP, fieldOutlier, fieldThreshold, fieldWindow, jTextFieldSampleName});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Double getThreshold() {
        double v = ExtractPeaksWorker.DEF_THRESHOLD;

        if (this.jCheckBoxMean.isSelected()) {
            v = (this.sample.getMean());
        }
        if (this.jCheckBoxMedian.isSelected()) {
            v = (this.sample.getMedian());
        }
        if (this.jCheckBoxStddev.isSelected()) {
            v += this.sample.getStddev();
        }
        if (this.jCheckBoxVariance.isSelected()) {
            v += this.sample.getVariance();
        }
        //Logger.getLogger(ExtractPeakDialog.class.getName()).log(Level.INFO, "getThreshold: " + v);
        return Math.abs(v);
    }
private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
    this.jButtonClose.setEnabled(false);
    this.jLabelPrompt.setText("Running .... please wait");
    ExtractPeaksWorker worker;

    Informable informable = new Informable() {

        @Override
        public void messageChanged(String message) {

            jTextAreaMsg.append(message + "\n");
        }
    };
    try {
        informable.messageChanged("Start Extract Regions....");
        informable.messageChanged("Get Data for " + sample.getName());
        this.repaint();

        this.win = CGHProTopComponent.findInstance(sample);

        Logger.getLogger(ExtractPeakDialog.class.getName()).log(
                Level.INFO, "Start Extract Regions for: "
                + win.getChip().getDataEntity().getName());
        this.jButtonClose.setEnabled(false);
        this.jButtonRun.setEnabled(false);

        worker = new FindPeaksWorkerImpl(
                win.getChip(),
                this.jTextFieldSampleName.getText(),
                ((Number) this.fieldThreshold.getValue()).doubleValue(),
                Integer.valueOf(this.fieldWindow.getText()),
                Double.valueOf(this.fieldOutlier.getText()),
                Integer.valueOf(this.fieldGAP.getText()),
                this.cbFakePeaks.isSelected(),
                informable);
        PropertyChangeListener listener = new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress".equals(evt.getPropertyName())) {
                    jProgressBar.setValue((Integer) evt.getNewValue());
                }
            }
        };
        worker.addPropertyChangeListener(listener);
    } catch (Exception ex) {
        Logger.getLogger(ExtractPeakDialog.class.getName()).log(Level.SEVERE, ex.getMessage());
        informable.messageChanged("Error Extract Regions...." + ex.getMessage());
        this.jButtonClose.setEnabled(true);
        this.jButtonRun.setEnabled(true);
        return;
    }
    // Start the worker. Note that control is 
    // returned immediately
    worker.execute();

}//GEN-LAST:event_jButtonRunActionPerformed

    private void jCheckBoxThresholdActionPerformed(java.awt.event.ActionEvent evt) {
        this.fieldThreshold.setValue(this.getThreshold());
    }

private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
    this.dispose();

}//GEN-LAST:event_jButtonCloseActionPerformed

private void cbFakePeaksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFakePeaksActionPerformed
}//GEN-LAST:event_cbFakePeaksActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ExtractPeakDialog dialog = new ExtractPeakDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupCenter;
    private javax.swing.ButtonGroup buttonGroupPlus;
    private javax.swing.JCheckBox cbFakePeaks;
    private javax.swing.JTextField fieldGAP;
    private javax.swing.JTextField fieldOutlier;
    private javax.swing.JFormattedTextField fieldThreshold;
    private javax.swing.JTextField fieldWindow;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JCheckBox jCheckBoxMean;
    private javax.swing.JCheckBox jCheckBoxMedian;
    private javax.swing.JCheckBox jCheckBoxNone;
    private javax.swing.JCheckBox jCheckBoxStddev;
    private javax.swing.JCheckBox jCheckBoxVariance;
    private javax.swing.JCheckBox jCheckBoxZero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelProgress;
    private javax.swing.JLabel jLabelPrompt;
    private javax.swing.JLabel jLabelSample;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaMsg;
    private javax.swing.JTextField jTextFieldSampleName;
    // End of variables declaration//GEN-END:variables

    private class FindPeaksWorkerImpl extends ExtractPeaksWorker {

        private FindPeaksWorkerImpl(ChipFeature c,
                String trackid, Double threshold, Integer window, Double outlier,
                Integer maxGap, boolean fakePeak, Informable inf) {
            super(c, trackid, threshold, window, outlier, maxGap, fakePeak, inf);
        }

        // This method is invoked when the worker is finished
        // its task
        @Override
        protected void done() {
            try {
                // Get the number of matches. Note that the
                // method get will throw any exception thrown
                // during the execution of the worker.
                ChipFeature peaks = get();
                win.addChip(peaks);
                jLabelPrompt.setText("Finished ... close or rerun!");

                jButtonClose.setEnabled(true);
                jButtonRun.setEnabled(true);

            } catch (Exception e) {
                Logger.getLogger(ExtractPeakDialog.class.getName()).log(Level.WARNING, "warn ", e);
                JOptionPane.showMessageDialog(null, "Error", e.getMessage(), JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
